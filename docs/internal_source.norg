@document.meta
title: Internal source
description: Type description of internal neovim source
authors: [
    max397574
]
categories: [
    docs,
    types
]
created: 2024-05-31T12:48:14+0100
updated: 2024-06-18T19:34:31+0100
tangle: {
    languages: {
        lua: ../lua/neocomplete/types/internal_source.lua
    }
    scope: tagged
    delimiter: none
}
version: 1.1.1
@end

* General
  The internal sources are used on top of {:./source:}[completion sources] to store additional
  metadata about which the source author doesn't have to care and sometimes can't know.
  #tangle
  @code lua
  --- Internal class for neocomplete to store source metadata
  ---@class neocomplete.internal_source
  @end

** Source
   This field is used to store the source written by the source author.
   #tangle
   @code lua
   --- The external completion source
   ---@field source neocomplete.source
   @end


** Entries
   In the entries field entries gotten from the source are stored. This is used to be able to sort
   and filter the entries when not getting new ones.
   #tangle
   @code lua
   --- The entries recieved by last completion
   ---@field entries neocomplete.entry[]
   @end

** New
   This function creates a new instance.
   #tangle
   @code lua
   --- The entries recieved by last completion
   ---@field new fun(completion_source: neocomplete.source): neocomplete.internal_source
   @end

** Incomplete
   Here a boolean is set which shows whether the source already completed all it's entries or not.
   This is mostly used by sources for performance reasons.
   #tangle
   @code lua
   --- Whether the source is incomplete
   ---@field incomplete boolean
   @end

** Get keyword pattern
   This function is used to get the keyword pattern for the source. It uses the string field, the
   method to get it and as fallback the one from the config.
   #tangle
   @code lua
   --- Get the keyword pattern
   ---@field get_keyword_pattern fun(self: neocomplete.internal_source): string
   @end

** Get offset
   With this function the offset of the source is determined. The offset describes at which point
   the completions for this source start. This is required to be able to remove that text if needed
   and to determine the characters used for filtering and sorting.
   #tangle
   @code lua
   --- The offset at which completions from source were loaded
   ---@field get_offset fun(self: neocomplete.internal_source, context: neocomplete.context): integer
   @end
