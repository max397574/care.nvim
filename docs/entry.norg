@document.meta
title: Entry
description: Type description of neocomplete.nvim entry
authors: [
    max397574
]
categories: [
    docs,
    types
]
created: 2023-11-15T17:42:46+0100
updated: 2024-07-07T21:15:43+0100
tangle: {
    languages: {
        lua: ../lua/neocomplete/types/entry.lua
    }
    scope: tagged
    delimiter: none
}
version: 1.1.1
@end

* General
  Entries are the basic items in the completion menu. Arguably the most important field is the
  completion item for which the lsp type is used.
  #tangle
  @code lua
  --- An entry for the neocomplete completion menu
  ---@class neocomplete.entry
  ---@field completion_item lsp.CompletionItem
  @end

* Methods
** New
   The new function is the constructor for a new completion entry.
   #tangle
   @code lua
   --- Creates a new entry
   ---@field new fun(completion_item: lsp.CompletionItem, source: neocomplete.internal_source, context: neocomplete.context): neocomplete.entry
   @end

** Get insert text
  This function is used to get the text that will be inserted for the entry. This is important for
  the ghost text.
   #tangle
   @code lua
   --- Get insert text
   ---@field get_insert_text fun(self: neocomplete.entry): string
   @end

** Get insert word
   This function is used to get part of the text that will be inserted for the entry. It just uses
   a pattern to match the insert text and get the beginning of it which matches a vim `word`. This
   is often e.g. the method name but without the parentheses and parameter names. That function is
   used for the `insert` selection behavior.
   #tangle
   @code lua
   --- Get insert word
   ---@field get_insert_word fun(self: neocomplete.entry): string
   @end

* Fields
** Source
   This is the source from which the entry came. This is important for using the right keyword
   pattern and getting the right offset.
   #tangle
   @code lua
   --- Source from which the entry came
   ---@field source neocomplete.internal_source
   @end

** Context
   This is the context in which the entry was completed. This is important to now what context text-
   edits of the entry target.
   #tangle
   @code lua
   --- Context in which entry was completed
   ---@field context neocomplete.context
   @end

** Matches
   Position of matches which were found during filtering. This is just used to highlight them in the
   completion menu with `@neocomplete.match`.
   #tangle
   @code lua
   --- Matches in filter text
   ---@field matches integer[]
   @end

** Score
   This is the score obtained from filtering. It is used to sort which happens in the
   `neocomplete.sorter` module.
   #tangle
   @code lua
   --- Score from filtering
   ---@field score number
   @end

** Get Offset
   Essentially where entry insertion should happen (column)
   #tangle
   @code lua
   --- Get offset of entry
   ---@field get_offset fun(self: neocomplete.entry): integer
   @end
